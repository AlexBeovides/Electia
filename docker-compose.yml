services:
  # Base de datos SQL Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: electia-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=ElectiaDB123!
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P ElectiaDB123! -Q 'SELECT 1' -C || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - electia-network
  # Database Initialization
  db-init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: electia-db-init
    volumes:
      - ./init-db.sh:/init-db.sh
    entrypoint: ["/bin/bash", "/init-db.sh"]
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - electia-network
    restart: "no"
  # API .NET Core
  api:
    build:
      context: ./ElectiaCore
      dockerfile: Dockerfile
    image: electia-api:latest
    container_name: electia-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=ElectiaDB;User Id=sa;Password=ElectiaDB123!;TrustServerCertificate=true;
    ports:
      - "5000:80"
    depends_on:
      sqlserver:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - electia-network

  # Frontend React
  frontend:
    build:
      context: ./ElectiaApp
      dockerfile: Dockerfile
    image: electia-frontend:latest
    container_name: electia-frontend
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - electia-network

volumes:
  sqlserver_data:

networks:
  electia-network:
    driver: bridge
